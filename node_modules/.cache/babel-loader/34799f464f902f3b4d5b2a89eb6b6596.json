{"ast":null,"code":"import axios from \"axios\";\n\n// add a date range here\nconst getPhotos = async _ref => {\n  let {\n    startDate,\n    endDate,\n    setLoading,\n    setPhotos\n  } = _ref;\n  let url;\n\n  if (endDate) {\n    url = `https://api.nasa.gov/planetary/apod?api_key=ykzQINaucAEoc1RW6I3CqVke24wjlu9JAyrDVcKd&start_date=${startDate}&end_date=${endDate}`;\n  } else {\n    url = `https://api.nasa.gov/planetary/apod?api_key=ykzQINaucAEoc1RW6I3CqVke24wjlu9JAyrDVcKd&start_date=${startDate}`;\n  }\n\n  try {\n    axios.get(url).then(response => {\n      console.log(response.data);\n      setLoading(false);\n      setPhotos(response.data);\n    });\n  } catch {\n    console.error(\"There was an error retrieving the data\");\n    return undefined;\n  }\n};\n\nconst PhotoService = {\n  getPhotos\n};\nexport default PhotoService;","map":{"version":3,"sources":["/Users/mlj/Documents/spacestagram/src/services/photoService.ts"],"names":["axios","getPhotos","startDate","endDate","setLoading","setPhotos","url","get","then","response","console","log","data","error","undefined","PhotoService"],"mappings":"AAAA,OAAOA,KAAP,MAAqC,OAArC;;AAUA;AACA,MAAMC,SAAS,GAAG,cAK2B;AAAA,MALpB;AACvBC,IAAAA,SADuB;AAEvBC,IAAAA,OAFuB;AAGvBC,IAAAA,UAHuB;AAIvBC,IAAAA;AAJuB,GAKoB;AAC3C,MAAIC,GAAJ;;AAEA,MAAIH,OAAJ,EAAa;AACXG,IAAAA,GAAG,GAAI,mGAAkGJ,SAAU,aAAYC,OAAQ,EAAvI;AACD,GAFD,MAEO;AACLG,IAAAA,GAAG,GAAI,mGAAkGJ,SAAU,EAAnH;AACD;;AAED,MAAI;AACFF,IAAAA,KAAK,CAACO,GAAN,CAAuBD,GAAvB,EAA4BE,IAA5B,CAAkCC,QAAD,IAAc;AAC7CC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACAR,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAC,MAAAA,SAAS,CAACI,QAAQ,CAACG,IAAV,CAAT;AACD,KAJD;AAKD,GAND,CAME,MAAM;AACNF,IAAAA,OAAO,CAACG,KAAR,CAAc,wCAAd;AACA,WAAOC,SAAP;AACD;AACF,CAxBD;;AA0BA,MAAMC,YAAY,GAAG;AACnBd,EAAAA;AADmB,CAArB;AAIA,eAAec,YAAf","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\nimport PhotoData from \"../types/photoData\";\n\ntype PhotoParameters = {\n  startDate: string;\n  endDate?: string;\n  setLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  setPhotos: React.Dispatch<React.SetStateAction<PhotoData[]>>;\n};\n\n// add a date range here\nconst getPhotos = async ({\n  startDate,\n  endDate,\n  setLoading,\n  setPhotos,\n}: PhotoParameters): Promise<PhotoData[]> => {\n  let url: string;\n\n  if (endDate) {\n    url = `https://api.nasa.gov/planetary/apod?api_key=ykzQINaucAEoc1RW6I3CqVke24wjlu9JAyrDVcKd&start_date=${startDate}&end_date=${endDate}`;\n  } else {\n    url = `https://api.nasa.gov/planetary/apod?api_key=ykzQINaucAEoc1RW6I3CqVke24wjlu9JAyrDVcKd&start_date=${startDate}`;\n  }\n\n  try {\n    axios.get<PhotoData[]>(url).then((response) => {\n      console.log(response.data);\n      setLoading(false);\n      setPhotos(response.data);\n    });\n  } catch {\n    console.error(\"There was an error retrieving the data\");\n    return undefined;\n  }\n};\n\nconst PhotoService = {\n  getPhotos,\n};\n\nexport default PhotoService;\n"]},"metadata":{},"sourceType":"module"}